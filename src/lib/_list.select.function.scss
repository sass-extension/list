// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../comparison/comparison.compare.function' as comparison-compare;
@use 'list.index.function' as list-index;
@use 'remove/remove.duplicate.function' as remove-duplicate;

// Todo
// The `list.select()` function returns the list with elements selected by comparison.
// @param `$select` The value of list or string type indicates what to retrieve from the given `$from` list.
//        The value of list type consists of occurrence and selection, in order (occurrence selection). It's changed to (selection occurrence)
//        when selection `has` is used, and there are (has only), (has any), (has all).
//        Occurrence (all, any, end, first, last, only) indicates how often compared elements occur in the given `$from` list.
//        Selection can take the values has, index, type, value and indicates what to retrieve from the list.
// @param `$from` The list to retrieve elements from, by the given comparison.
// @param `$operand` The value of string type can take (index, type, value) and indicates an operand from the list used in the comparison.
// @param `$operator` The operator used to compare given `$value` and/or `$values` with `$operand` of the `$from` list.
// @param `$value` The required value to select from the given `$from`.
// @arbitrary `$values...` Additional values to select from the given `$from` list.
// @returns The returned value is the list with the elements selected by the given comparison.
@function select(
  $select: index,
  $from: null,
  $operand: value,
  $operator: '==',
  $value,
  $values...
) {
  $result: ();
  $select: list.length($select) == 1 and (any $select) or $select;

  // Get occurrence from `$select`.
  $occurrence: list.nth($select, list-index.index($select, all, any, end, first, last, only, start));

  // Get select from `$select`.
  $select: list.nth($select, list-index.index($select, has, index, type, value));

  // Each loop.
  @each $value in list.join(($value,), $values, comma) {
    $do: true;
    $compared-result: ();
    $index: 1;
    $operand-of: null;

    @while $do == true {
      $comparison-result: comparison-compare.compare(
        map.get((
          index: $index,
          type: meta.type-of(list.nth($from, $index)),
          value: list.nth($from, $index)),
          $operand
        ),
        $operator,
        $value
      );
      
      $operand-of: meta.type-of(map.get((
        index: $index,
        type: meta.type-of(list.nth($from, $index)),
        value: list.nth($from, $index)),
        $operand
      ));

      @if $comparison-result or ($select == has and $occurrence == only) {
        $compared-result: list.append(
          $compared-result,
          map.get((
            has: $comparison-result,
            index: $index,
            type: meta.type-of(list.nth($from, $index)),
            value: list.nth($from, $index)),
            $select
          ),
          comma
        );
      }

      // Break the while.
      $do: if(
        $index == list.length($from)
          or (not (list.length($compared-result) == 0)
          and list.index(first start, $occurrence)),
        false,
        $do
      );
      $index: $index + 1;
    }

    $compared-result: list.length($compared-result) > 0
      and $compared-result
      or null;

    @if $compared-result {
      @if $select == has and list.index(all only, $occurrence) {
        $compared-result: remove-duplicate.duplicate($compared-result);
        $compared-result: if(
          list.index($compared-result, null) or list.index($compared-result, false),
          false,
          true
        );
      }

      // Occurrence. REVIEW: Check occurrence all.
      $compared-result: if(
        list.index(any first start end last, $occurrence),
        list.nth($compared-result, list.index(any first start, $occurrence) and 1 or list.length($compared-result)),
        if(
          not ($operand-of == list) and list.length($compared-result) == 1,
          list.nth($compared-result, 1),
          $compared-result
        ) 
      );
    }
    $result: list.append($result, $compared-result, comma);
  }

  // has
  @if $select == has {
    $result: if(
      list.index(all, $occurrence),
      if(
        list.index($result, null) or list.index($result, false),
        false,
        true
      ),
      if(
        list.index(any end first last, $occurrence),
        if(
          list.index($result, true),
          true,
          false
        ),
        if(
          $occurrence == only,
          $result,
          false,
        )
      )
    );
  }

  @if list.length($values) > 0 {
    @return $result;
  } @else {
    @return list.nth($result, 1);
  }

  // REVIEW: Check.
  // // Returns.
  // @return if(
  //   list.length($result) > 0,
  //   if(
  //     list.length($result) == 1 and not (meta.type-of(list.nth($result, 1)) == list),
  //     list.nth($result, 1),
  //     $result
  //   ),
  //   null
  // );
}


// index
// @debug select(index, 1px solid dotted red 1px red, value, '==', 1px, red); // 1, 4

// all index - one value
// @debug select(all index, 1px solid red, value, '==', 1px); // 1
// @debug select(all index, 1px solid 1px red, value, '==', 1px); // 1, 3

// all index - one value - 
// @debug select(all index, 1px solid red 1px red, value, '==', 1px, red); // (1, 4), (3, 5)

// @debug select(index, 1px solid 1px red, value, '==', 1px); // 1
// @debug select(all index, 1px solid 1px red, value, '==', 1px, red); // 1

// ---
// single value
// @debug select($from: 1px solid red, $operand: value, $operator: '==', $value: 1px); // 1
// @debug select(index, 1px solid red, value, '==', 1px); // 1
// @debug select(first index, 1px solid red, value, '==', 1px); // 1
// @debug select(any index, 1px solid red, value, '==', solid); // 2
// @debug select(all index, 1px solid 1px red, value, '==', 1px, solid, red); // (1, 3), 2, 4

// map
// @debug select(first value, (border: 1px solid red) (background: #fff), value, ':==', map); // (border: 1px solid red)
// @debug select(value, (border: 1px solid red) (background: #fff), value, ':==', map); // (border: 1px solid red)

// multiple values
// @debug select(index, 1px solid red, value, '==', 1px, red); // 1, 3
// @debug select(first index, 1px solid red, value, '==', 1px, red); // 1, 3

// select type
// @debug select(index, 1px solid red, value, '==', dashed); // null
// @debug select(first index, 1px solid red, value, '==', dashed); // null
// @debug select(first value, 1px solid red, value, ':==', color); // red

// last occurrence
// @debug select(index, 1px solid red, type, '==', string); // 2
// @debug select(last index, 1px solid red, type, '==', string); // 2

// all occurrences
// @debug select(all index, 1px solid red, type, '==', string); // 2
// @debug select(all index, 1px solid red, type, '==', string, number); // 2, 1



// Examples.
$-example-list: 300px 'a' 10px 'b' 2px 'c' 15px 'd' 1px 'e' 300px 'f' 500px 'g' 3px 'h' 150px 'i' 2px
  ((elem1, elem2), elem3, elem4, elem5, elem6) null false null true (elem7, elem5) null (key: value);

// SECTION: select: has
// (has all, from, index|type|value)
// @debug select(has all, $-example-list, value, '==', 2px, 'f', 'the', 3px); // false
// @debug select(has all, $-example-list, value, '==', (elem7, elem5), (key: value)); // true
// @debug select(has all, $-example-list, value, '==', null, false, true); // true

// @debug select(has all, 1 'a' 2 'b' 3 'c' 4 'd' 5 'e' 6 'f' 7 'g' 8 'h' 9 'i' 10 'j', value, '==', 'e', 'f'); // true
// @debug select(has all, 1 'a' 2 'b' 3 'c' 4 'd' 5 'e' 6 'f' 7 'g' 8 'h' 9 'i' 10 'j', value, '==', 'e', 'f', 6, 10, 112); // false
// @debug select(has all, ('a', 'b', 'c'), value, '==', 'a', 'b', 'c', false); // false

// (has first/any/start, from, index|type|value)
// @debug select(has first, $-example-list, index, '==', 5); // true
// @debug select(has first, $-example-list, type, '==', bool, number); // false
// @debug select(has any, $-example-list, value, '==', 2px, 'f', 'the'); // true
// @debug select(has any, ('a', 'b', 1, 2, 3, (a, b, c), 'c', 5123), value, ':==', list, number, string, bool); // true

// (has last/end, from, index|type|value)
// @debug select(has last, $-example-list, value, '==', 2px); // true
// @debug select(has last, $-example-list, value, '==', 150px); // true

// (has only, from, index|type|value)
// @debug select(has only, 2px 2px 2px 2px, value, '==', 2px, 'f', 'the', 3px, 10px); // true, false, false, false, false


// SECTION: select: index
// (all index, from, type)
// @debug select(all index, $-example-list, type, '==', number); // 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
// @debug select(all index, $-example-list, type, '==', string); // 2, 4, 6, 8, 10, 12, 14, 16, 18

// (all index, from, value)
// @debug select(all index, $-example-list, value, '==', 300px); // 1, 11
// @debug select(all index, $-example-list, value, '==', 2px); // 5, 19

// (first/any/start index, from, type)
// @debug select(first index, $-example-list, type, '==', string); // 2
// @debug select(first index, $-example-list, type, '==', number); // 1

// (first/any/start index, from, value)
// @debug select(first index, $-example-list, value, '==', 'a'); // 2
// @debug select(first index, $-example-list, value, '==', 1px); // 9
// @debug select(first index, $-example-list, value, '==', 2px); // 5

// (last/end index, from, type)
// @debug select(last index, $-example-list, type, '==', number); // 19
// @debug select(last index, $-example-list, type, '==', string); // 18

// (last/end index, from, value)
// @debug select(last index, $-example-list, value, '==', 'a'); // 2
// @debug select(last index, $-example-list, value, '==', 2px); // 19

// (only index, from, index|type|value) NOTE: not possible
// @debug select(only index, $-example-list, value, '==', 2px); // 19



// DONE: all/first(any)/last index index
// DONE: all/first(any)/last index type
// DONE: all/first(any)/last index value

// @debug select(all index, $-example-list, index, '==', 2, 5, 10); // 2, 5, 10
// @debug select(all index, $-example-list, type, '==', number, string, bool); // (1, 3, 5, 7, 9, 11, 13, 15, 17, 19), (2, 4, 6, 8, 10, 12, 14, 16, 18), null
// @debug select(all index, $-example-list, value, '==', 1px, 2px, 3px); // 9, (5, 19), 15

// @debug select(index, $-example-list, index, '==', 2, 5, 10); // 2, 5, 10
// @debug select(first index, $-example-list, type, '==', number, string); // 1, 2
// @debug select(first index, $-example-list, value, '==', 1px, 2px, 3px); // 9, 5, 15

// @debug select(index, $-example-list, index, '==', 2, 5, 10); // 2, 5, 10
// @debug select(last index, $-example-list, tyfrom


// SECTION: select: type
// (all type, from, index)
// @debug select(all type, $-example-list, type, '==', number, string, calculation); // (number, number, number, number, number, number, number, number, number, number), (string, string, string, string, string, string, string, string, string), null
// @debug select(all type, $-example-list, value, '==', 1px, 2px, 3px, 'e', 'the'); // number, (number, number), number, string, null

// (all type, from, type)
// @debug select(all type, $-example-list, type, '==', number); // number, number, number, number, number, number, number, number, number, number
// @debug select(all type, $-example-list, type, '==', string); // string, string, string, string, string, string, string, string, string

// (all type, from, value)
// @debug select(all type, $-example-list, value, '==', 150px, 'd'); // string, number


// (first/any/start type, from, index)
// @debug select(any type, $-example-list, index, '==', 2, 5, 10); // string, number, string

// (first/any/start type, from, type) INFO: useless?
// @debug select(first type, $-example-list, type, '==', number); // number
// @debug select(first type, $-example-list, type, '==', number, string); // number, string

// (first/any/start type, from, value) INFO: useless?
// @debug select(start type, $-example-list, value, '==', 2px); // number


// (last/end type, from, index) INFO: 
// @debug select(last type, $-example-list, index, '==', 5); // number
// @debug select(end type, $-example-list, index, '==', 5, 10); // number, string

// (last/end type, from, type) INFO: useless
// @debug select(last type, $-example-list, type, '==', number); // number
// @debug select(last type, $-example-list, type, '==', number, string); // number, string

// (last/end type, from, value) NOTE: useful
// @debug select(last type, $-example-list, value, '==', 500px); // number
// @debug select(last type, $-example-list, value, '==', 500px, 'e'); // number, string


// (only type, from, index)
// @debug select(only type, $-example-list, index, '==', 2px); //
// @debug select(only type, $-example-list, index, '==', 2px); //

// (only type, from, type)
// @debug select(only type, $-example-list, type, '==', 2px); //

// (only type, from, value)
// @debug select(only type, $-example-list, value, '==', 2px); //



// DONE: all/first(any)/last type index
// DONE: all/first(any)/last type type
// DONE: all/first(any)/last type value

// @debug select(first type, $-example-list, index, '==', 2, 5, 10, 100); // string, number, string, null
// @debug select(first type, $-example-list, type, '==', number, string, bool); // number, string, null
// @debug select(first type, $-example-list, value, ':==', number, string, bool); // number, string, null
// @debug select(first type, $-example-list, value, '==', 1px, 2px, 157px, 3px, 'e', 'the'); // number, number, null, number, string, null

// @debug select(type, $-example-list, index, '==', 2, 5, 10, 100); // string, number, string, null
// @debug select(last type, $-example-list, type, '==', number, string, bool); // number, string, null
// @debug select(last type, $-example-list, value, ':==', number, string, bool); // number, string, null
// @debug select(type, $-example-list, value, '==', 1px, 2px, 157px, 3px, 'e', 'the'); // number, number, null, number, string, null


// SECTION: select: value
// (all value, from, index|type|value)
// NOTE: 
// @debug select(all value, $-example-list, index, '==', 2, 5, 10); // "a", "2px", "e"
// @debug select(all value, $-example-list, type, '==', number, string); // (300px, 10px, 2px, 15px, 1px, 300px, 500px, 3px, 150px, 2px), ("a", "b", "c", "d", "e", "f", "g", "h", "i")
// @debug select(all value, $-example-list, value, '==', 1px, 2px, 3px); // 1px, (2px, 2px), 3px

// (first/any/start value, from, index|type|value)
// @debug select(value, $-example-list, index, '==', 2, 5, 10); // "a", "2px", "e"
// @debug select(value, $-example-list, value, '==', 1px, 2px, 3px); // 1px, 2px, 3px

// @debug select(first value, $-example-list, index, '==', 2, 5, 10); // "a", "2px", "e"
// @debug select(first value, $-example-list, type, '==', number, string); // 300px, "a"
// @debug select(first value, $-example-list, value, '==', 1px, 2px, 3px); // 1px, 2px, 3px // NOTE: not useful

// (last/end value, from, index|type|value)
// @debug select(last value, $-example-list, type, '==', number, string); // 2px, "i"

// (only value, from, index|type|value)



// DONE: all/first(any)/last index index
// DONE: all/first(any)/last index type
// DONE: all/first(any)/last index value

// INFO: here


// different operator
// @debug select(value, $-example-list, value, '>', 2, 5, 10); // 300px, 300px, 300px
// @debug select(all value, $-example-list, value, '>', 2, 5, 10); // (300px, 10px, 15px, 300px, 500px, 3px, 150px), (300px, 10px, 15px, 300px, 500px, 150px), (300px, 15px, 300px, 500px, 150px)
// @debug select(value, $-example-list, value, '<', 2, 5, 10); // 1px, 2px, 2px
// @debug select(all value, $-example-list, value, '<', 2, 5, 10); // 1px, (2px, 1px, 3px, 2px), (2px, 1px, 3px, 2px)

// @debug select(first index, $-example-list, value, '>', 2, 5, 10); // 1, 1, 1
// @debug select(first index, $-example-list, value, '<', 2, 5, 10); // 9, 5, 5

// @debug select(last index, $-example-list, value, '>', 2, 5, 10); // 17, 17, 17
// @debug select(last index, $-example-list, value, '<', 2, 5, 10); // 9, 19, 19

// @debug select(all index, $-example-list, value, '>', 2, 5, 10); // (1, 3, 7, 11, 13, 15, 17), (1, 3, 7, 11, 13, 17), (1, 7, 11, 13, 17
// @debug select(all index, $-example-list, value, '>=', 2, 5, 10); // 9, (5, 9, 15, 19), (5, 9, 15, 19)

// @debug select(all index, $-example-list, value, '<', 2, 5, 10); // 9, (5, 9, 15, 19), (5, 9, 15, 19)
// @debug select(all index, $-example-list, value, '<=', 2, 5, 10); // 9, (5, 9, 15, 19), (5, 9, 15, 19)
