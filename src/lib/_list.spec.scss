// Modules.
@use '../list';
@use '../test';

// Spec.
$spec: (
  swap: true,
  to: true,
);

// `list.to-map()`
// string key
// @debug list.to-map(a b c, key1, key2, key3); // (key1: a, key2: b, key3: c)

// string key as list
// @debug list.to-map(a b c, (key1, key1-2), key2, key3); // (key1: (key1-2: a), key2: b, key3: c)

// map to determine the type
// @debug list.to-map(a b c, (key1: string), (key2: number), key3); // (key1: a, key3: c)


// SECTION: list.to()
$-list: ('a', 'b', c, d, 2, 4, 5, (a: 1));

@include test.to-equal(
  'list.to()',
  (
    list.to(('a',), 1), // ("a",)
    list.to(('a',), -1), // ("a",)

    list.to($-list, 1), // ("a",)
    list.to($-list, -1), // ((a: 1),)

    list.to($-list, 4), // "a", "b", c, d
    list.to($-list, 7), // "a", "b", c, d, 2, 4, 5

    list.to('&' '.' 'a' 'b' 'c', 2), // "&" "."
  ),
  (
    ("a",),
    ("a",),
    ("a",)
    ((a: 1),),
    ("a", "b", c, d),
    ("a", "b", c, d, 2, 4, 5),
    ("&" "."),
  ),
  map.get($spec, to),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.swap()
$-list: ('a', 'b', c, d, 2, 4, 5, (a: 1));

@include test.to-equal(
  'list.swap()',
  (
    list.swap($-list, 2, 8), // "a", (a: 1), c, d, 2, 4, 5, "b"
    list.swap($-list, 3, 6), // "a", "b", 4, d, 2, c, 5, (a: 1)
  ),
  (
    ("a", (a: 1), c, d, 2, 4, 5, "b"),
    ("a", "b", 4, d, 2, c, 5, (a: 1)),
  ),
  map.get($spec, swap),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}
